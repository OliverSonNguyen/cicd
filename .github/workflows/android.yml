name: Android Release on Tag

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  # Keystore Password
  SIGNING_KEYSTORE_PASSWORD: ${{ secrets.SIGNING_KEYSTORE_PASSWORD }}

  # Keystore Alias
  SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}

  # Keystore Alias Password
  SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}

jobs:
  build:
    name: Build APKs
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Parse version from tag (Python)
        id: version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          GITHUB_NAME="${{ github.ref_name }}"
          TAG="${GITHUB_NAME#v}"
          echo "Parsing tag: $TAG"

          # Run scripts to parse tag information and assign it to GITHUB_ENV
          # python3 scripts/cicd.py "$TAG" --github-action

          python3 scripts/cicd.py "$TAG" --apk-cmd

      - name: Get value from python parse
        run: |
          echo "Version name:$CI_VERSION_NAME"
          echo "Version code:$CI_VERSION_CODE"
          echo "Flavor:$CI_FLAVOR"
          echo "Build Type:$CI_BUILD_TYPE"
          echo "Gradlew cmd:${CI_GRADLE_COMMAND}"

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle


      - name: Cache Gradle and wrapper
        id: setup-gradle
        uses: gradle/gradle-build-action@v2
        with:
          dependency-graph: generate-and-submit
          cache-disabled: false


      - name: Run Unit Test
        run:
          echo "All Unit test passed ^^!"

      - name: Decode keyStore and Save it for signing
        env:
          ENCODED_KEYSTORE: ${{ secrets.SIGNING_KEYSTORE }}
        run: |
          tmp_keystore_directory="${RUNNER_TEMP}"/keystore
          mkdir "${tmp_keystore_directory}"
          echo $ENCODED_KEYSTORE | base64 -d > "${tmp_keystore_directory}"/keystore.jks
          echo "SIGNING_KEYSTORE_FILE_PATH="${tmp_keystore_directory}"/keystore.jks" >> $GITHUB_ENV


      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build release app
        env:
          SIGNING_KEYSTORE_FILE_PATH: ${{ env.SIGNING_KEYSTORE_FILE_PATH }}
          SIGNING_KEYSTORE_PASSWORD: ${{ env.SIGNING_KEYSTORE_PASSWORD }}
          SIGNING_KEY_ALIAS: ${{ env.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ env.SIGNING_KEY_PASSWORD }}
          # CI_VERSION_NAME: ${{ env.CI_VERSION_NAME }}
          # CI_VERSION_CODE: ${{ env.CI_VERSION_CODE }}
        run: |
          echo "Start build release app"
          echo "CI_VERSION_NAME:$CI_VERSION_NAME"     
          echo "CI_VERSION_CODE:$CI_VERSION_CODE" 
          echo "BUILD_TYPE:$CI_BUILD_TYPE"

        

          # ./gradlew --no-daemon --stacktrace --console=plain assembleRelease
          $CI_GRADLE_COMMAND

          echo "all done!"

      - name: Collect APKs
        run: |
          echo "Listing APKs:"
            find app/build/outputs/apk -type f -name "*.apk" -print

      - name: Find Apk paths
        id: findApkPaths
        run: |
          GITHUB_NAME="${{ github.ref_name }}"
          TAG="${GITHUB_NAME#v}"
          echo "Find Apk paths tag: $TAG"

          python3 scripts/cicd.py "$TAG" --apk-paths


      - name: Upload Full apks if available
        if: env.RELEASE_FULL_UNIVERSAL_PATH != '' && env.RELEASE_FULL_UNIVERSAL_PATH != null
        uses: actions/upload-artifact@v4
        with:
          name: release-full-${{ github.ref_name }}
          path: ${{ env.RELEASE_FULL_UNIVERSAL_PATH }}

      - name: Upload Stripe APK if available
        if: env.RELEASE_STRIPE_ARMEABI_PATH != '' && env.RELEASE_STRIPE_ARMEABI_PATH != null
        uses: actions/upload-artifact@v4
        with:
          name: release-stripe-${{ github.ref_name }}
          path: ${{ env.RELEASE_STRIPE_ARMEABI_PATH }}

      - name: Upload Adyen APK if available
        if: env.RELEASE_ADYEN_UNIVERSAL_PATH != '' && env.RELEASE_ADYEN_UNIVERSAL_PATH != null
        uses: actions/upload-artifact@v4
        with:
          name: release-adyen-${{ github.ref_name }}
          path: ${{ env.RELEASE_ADYEN_UNIVERSAL_PATH }}

      - name: Upload Ingenico APK if available
        if: env.RELEASE_INGENICO_ARMEABI_PATH != '' && env.RELEASE_INGENICO_ARMEABI_PATH != null
        uses: actions/upload-artifact@v4
        with:
          name: release-ingenico-${{ github.ref_name }}
          path: ${{ env.RELEASE_INGENICO_ARMEABI_PATH }}

          

          

      - name: Echo upload message
        run: |
          echo "Uploaded Full APK to tag: ${{ github.ref_name }}"

  # after your build job
  release:
    needs: [ build ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Show what was downloaded (debug)
        run: ls -R dist || true

    

      - name: Get apks downloaded location
        run: |
          GITHUB_NAME="${{ github.ref_name }}"
          TAG="${GITHUB_NAME#v}"
          echo "Get apks downloaded location TAG:$TAG"

          python3 scripts/cicd.py "$TAG" --apk-downloaded   

      - name: Publish APKs to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Release ${{ github.ref_name }}
            CICD Automated release with APKs built from tag.
              - Full Universal APK (if built)
              - Stripe ARM7 APK (if built) 
              - Adyen Universal APK (if built)
              - Ingenico ARM7 APK (if built)
 
          files: |
            dist/**/*.apk
          fail_on_unmatched_files: false
      
      - name: Deplay to Google Play If needed
        if: env.CI_SHOULD_SUBMIT == 'true' && env.DOWNLOAD_RELEASE_FULL_UNIVERSAL_PATH != '' && env.DOWNLOAD_RELEASE_FULL_UNIVERSAL_PATH != null
        run: |
          echo "Deplay to Google Play If needed CI_SHOULD_SUBMIT:${{ env.CI_SHOULD_SUBMIT }}"
          echo "Download path:${{ env.DOWNLOAD_RELEASE_FULL_UNIVERSAL_PATH }}"
      
      - name: Deploy to Google Play Store (Draft)
        if: env.CI_SHOULD_SUBMIT == 'true' && env.DOWNLOAD_RELEASE_FULL_UNIVERSAL_PATH != '' && env.DOWNLOAD_RELEASE_FULL_UNIVERSAL_PATH != null
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: son.nt.cicd  
          releaseFiles: ${{ env.DOWNLOAD_RELEASE_FULL_UNIVERSAL_PATH }}
          track: production  # Options: internal, alpha, beta, production
          status: draft    # This keeps it as draft, not released
          inAppUpdatePriority: 2
          userFraction: 1.0
          whatsNewDirectory: fastlane/metadata/android
          mappingFile: app/build/outputs/mapping/release/mapping.txt  # Optional: ProGuard mapping
          
          # Optional: Release notes
          releaseNotes: |
            - Bug fixes and performance improvements
            - Version ${{ github.ref_name }}    


      - name: Deplay to Stripe If needed
        if: env.CI_SHOULD_SUBMIT == 'true' && env.DOWNLOAD_RELEASE_STRIPE_PATH != '' && env.DOWNLOAD_RELEASE_STRIPE_PATH != null
        run: |
          echo "Deplay to Stripe If needed CI_SHOULD_SUBMIT:${{ env.CI_SHOULD_SUBMIT }}"
          echo "Download path:${{ env.DOWNLOAD_RELEASE_STRIPE_PATH }}"
          
      - name: Deplay to Adyen If needed
        if: env.CI_SHOULD_SUBMIT == 'true' && env.DOWNLOAD_RELEASE_ADYEN_UNIVERSAL_PATH != '' && env.DOWNLOAD_RELEASE_ADYEN_UNIVERSAL_PATH != null
        run: |
          echo "Deplay to Adyen If needed CI_SHOULD_SUBMIT:${{ env.CI_SHOULD_SUBMIT }}"    
          echo "Download path:${{ env.DOWNLOAD_RELEASE_ADYEN_UNIVERSAL_PATH }}"

      - name: Deplay to Ingenico If needed
        if: env.CI_SHOULD_SUBMIT == 'true' && env.DOWNLOAD_RELEASE_INGENICO_PATH != '' && env.DOWNLOAD_RELEASE_INGENICO_PATH != null
        run: |
          echo "Deplay to Ingenico If needed CI_SHOULD_SUBMIT:${{ env.CI_SHOULD_SUBMIT }} - NOT SUPPORT YET!"    
          echo "Download path:${{ env.DOWNLOAD_RELEASE_INGENICO_PATH }}" 


    
  # deploy-google-play:
  #   name: deploy-google-play
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   if: env.CI_SHOULD_SUBMIT == 'true' && env.RELEASE_FULL_UNIVERSAL_PATH != '' && env.RELEASE_FULL_UNIVERSAL_PATH != null
  #   steps:
  #     - name: Prepare
  #       run: |
  #         echo "Prepare deploy-google-play "







        
        

