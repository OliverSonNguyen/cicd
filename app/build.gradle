plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
}
def localProperties = new Properties()
def localFile = rootProject.file("local.properties")
if (localFile.exists()) {
    localProperties.load(localFile.newInputStream())
}
android {
    namespace 'son.nt.cicd'
    compileSdk 35

    defaultConfig {
        applicationId "son.nt.cicd"
        minSdk 24
        targetSdk 35
//        versionCode(System.getenv("CI_VERSION_CODE") ?: rootProject.ext.versionCode)
//        versionName(System.getenv("CI_VERSION_NAME") ?: rootProject.ext.versionName)

//        versionCode(project.findProperty("CI_VERSION_CODE")?.toString()?.toInteger()
//                ?: System.getenv("CI_VERSION_CODE")?.toInteger()
//                ?: rootProject.ext.versionCode)
//        versionName(project.findProperty("CI_VERSION_NAME")?.toString()
//                ?: System.getenv("CI_VERSION_NAME")
//                ?: rootProject.ext.versionName)

        def envVersionCode = System.getenv("CI_VERSION_CODE")
        def envVersionName = System.getenv("CI_VERSION_NAME")

        versionCode(envVersionCode ? envVersionCode.toInteger() : rootProject.ext.versionCode)
        versionName(envVersionName ?: rootProject.ext.versionName)

        println " Environment variable debug:"
        println "  System.getenv('CI_VERSION_CODE'): ${System.getenv('CI_VERSION_CODE')}"
        println "  System.getenv('CI_VERSION_NAME'): ${System.getenv('CI_VERSION_NAME')}"
        println "  rootProject.ext.versionCode: ${rootProject.ext.versionCode}"
        println "  rootProject.ext.versionName: ${rootProject.ext.versionName}"
        println " Final version: ${versionName} (${versionCode})"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a", "arm64-v8a"
            universalApk true
        }
    }

    flavorDimensions "app"
    productFlavors {
        apps_on_device {
            applicationId "son.nt.cicdt"
        }

        apps_on_device_adyen {
            applicationId "son.nt.cicd_adyen"
        }
        full {
            dimension "app"
            isDefault true
        }
    }

    signingConfigs {
        release {
            def ks = System.getenv("SIGNING_KEYSTORE_FILE_PATH") ?: file('Signing/hitpay_prod.jks')
            storeFile file(ks)
            storePassword System.getenv("SIGNING_KEYSTORE_PASSWORD") ?: localProperties["KEYSTORE_PASSWORD"]
            keyAlias System.getenv("SIGNING_KEY_ALIAS") ?: localProperties["KEY_ALIAS"]
            keyPassword System.getenv("SIGNING_KEY_PASSWORD") ?: localProperties["KEY_PASSWORD"]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def flavorName = variant.flavorName ?: "noFlavor"
            def buildType = variant.buildType.name
            def versionCode = variant.versionCode
            def versionName = variant.versionName
            def date = new Date().format('yyyyMMdd_HHmm')
            // get current git commit short hash
            def gitSha = "git rev-parse --short HEAD".execute().text.trim()

            def abiFilter = output.getFilter(com.android.build.OutputFile.ABI) ?: "universal"

            def apkName = "${buildType}_${flavorName}_${abiFilter}_${versionCode}_${versionName}_${gitSha}_${date}.apk"

            outputFileName = apkName
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}